import aws_cdk as cdk
from constructs import Construct
from aws_cdk import (Stack, aws_stepfunctions as sfn, aws_stepfunctions_tasks as tasks, aws_ec2 as ec2)
from aws_cdk import (Fn, CfnOutput,Duration)
from aws_cdk import (aws_sns as sns, aws_sns_subscriptions as subscriptions)

app = cdk.App()

class Ec2IsolateStack(Stack):

    def __init__(self, scope: Construct, construct_id: str, **kwargs) -> None:
        super().__init__(scope, construct_id, **kwargs)
        
        # Create Security group to move the Isolated instance. 
        
        #vpc = ec2.Vpc.from_lookup(self,"ImportVpc", vpc_name=app.node.try_get_context("VPC-NAME"), vpc_id=app.node.try_get_context("VPC-ID"))
        #EC2IsolateSG = ec2.SecurityGroup(self, "EC2IsolateSG",vpc=vpc)
        #EC2IsolateSG.add_ingress_rule(ec2.Peer.any_ipv4(), ec2.Port.tcp(22))
        
        
        # Create SNS topic to send alerts 
         
        EC2Isolate_topic = sns.Topic(self, "EC2Isolate_topic", topic_name="EC2Isolate_topic")
        EC2Isolate_topic.add_subscription(
            subscriptions.EmailSubscription("supritha.k@op.fi")
        )

        # Step Function stage creation
        # Stepfunction stage to collect Instance metadata

        Collect_Instance_Metadata = tasks.CallAwsService(self,"Get EC2 Instance Metadata",
        service = "ec2",
        action = "describeInstances",
        parameters = {
            "InstanceIds": sfn.JsonPath.string_at("States.Array($.InstanceId)")
        },
        iam_resources=["*"],
        result_path=sfn.JsonPath.string_at("$.InstanceDescription"),
        )
        
        # Stepfunction Stage to Enable Instance Termination Protection If not enabled
        
        Enable_Termination_Protection = tasks.CallAwsService(self,"Enable Termination Protection",
        service = "ec2",
        action = "modifyInstanceAttribute",
        parameters ={
            "InstanceId": sfn.JsonPath.string_at("$.InstanceDescription.Reservations[0].Instances[0].InstanceId"),
                "DisableApiTermination": {
                    "Value": "true"
                }
            },
            iam_resources=["*"],
            result_path=sfn.JsonPath.string_at("$.EnableTermination"),
        )
        
        # Create Security group to move the Isolated instance.
        
        create_ec2_IsolatedSG = tasks.CallAwsService(self, "create security group to Isolate Instance",
            service="ec2",
            action="createSecurityGroup",
            parameters={
                "Description": "EC2IsolateSG",
                "GroupName": "EC2IsolateSG",
                "VpcId": sfn.JsonPath.string_at("$.InstanceDescription.Reservations[0].Instances[0].NetworkInterfaces[0].VpcId"),
                
            },
            result_path=sfn.JsonPath.string_at("$.CreateSG"),
            iam_resources=["*"])
        
        # Isolate Instance by moving to new security group
        
        Modify_Instance_SG = tasks.CallAwsService(self, "Modify EC2 Instance SG",
            service="ec2",
            action="modifyInstanceAttribute",
            parameters={
                "InstanceId": sfn.JsonPath.string_at("$.InstanceDescription.Reservations[0].Instances[0].InstanceId"),
                "Groups": sfn.JsonPath.string_at("States.Array($.CreateSG.GroupId)")
            },
            result_path=sfn.JsonPath.string_at("$.ModifySG"),
            iam_resources=["*"])
        
        # Verify If the Instance to be Isolated is attached to an autoscaling group
        
        Verify_ASG_Attachment = tasks.CallAwsService(self, "Verify ASG Attachment",
            service="autoscaling",
            action="describeAutoScalingInstances",
            parameters={
                "InstanceIds": sfn.JsonPath.string_at("States.Array($.IsolatedInstanceId)")
            },
            iam_resources=["*"],
            result_path=sfn.JsonPath.string_at("$.AutoScalingAttachment")
        )
        
        # Create Choice state to detach Instance from ASG based on Attachment Info
        
        ASG_Choice = sfn.Choice(self, "ASG Attached?")

        ASG_Attachment_Info = sfn.Condition.is_present(variable="$.AutoScalingAttachment.AutoScalingInstances[0].AutoScalingGroupName")
        
        # Detach Instance to be Isolated from the autoscaling group 
        
        Detach_Instance_from_ASG = tasks.CallAwsService(self, "Detach Instance from ASG",
            service="autoscaling",
            action="detachInstances",
            parameters={
                "AutoScalingGroupName": sfn.JsonPath.string_at("$.AutoScalingAttachment.AutoScalingInstances[0].AutoScalingGroupName"),
                "ShouldDecrementDesiredCapacity": "false",
                "InstanceIds": sfn.JsonPath.string_at("States.Array($.IsolatedInstanceId)")
            },
            iam_resources=["*"],
            result_path=sfn.JsonPath.string_at("$.DetachInstance")
        )
        
        # Create Snaphot from the Isolated Instance volume
        
        Create_Snapshot = tasks.CallAwsService(self,"Create Snapshot of the Instance",
            service = "ec2",
            action = "createSnapshot",
            parameters ={
                "VolumeId": sfn.JsonPath.string_at("$.InstanceDescription.Reservations[0].Instances[0].BlockDeviceMappings[0].Ebs.VolumeId")
             },
            iam_resources=["*"],
            result_path=sfn.JsonPath.string_at("$.SnapshotId")
        )
                
        # provide statemachine definition
        sm_definition = sfn.Chain.start(Collect_Instance_Metadata).next(Enable_Termination_Protection).next(create_ec2_IsolatedSG).next(Modify_Instance_SG).next(Verify_ASG_Attachment).next(ASG_Choice.when
                    (
                        ASG_Attachment_Info, Detach_Instance_from_ASG
                    ).afterwards(include_otherwise=True))
        
        # Create State machine  
        
        EC2Isolate_StateMachine = sfn.StateMachine(self, "EC2Isolate_StateMachine",
            state_machine_name = "EC2Isolate_StateMachine",
            definition=sm_definition
            )

        CfnOutput(self, "EC2Isolate_StateMachineARN", description="Get EC2Isolate_StateMachine ARN",
            value=EC2Isolate_StateMachine.state_machine_arn       
        )

        CfnOutput(self, "EC2Isolate_StateMachineURL", description="Get EC2Isolate_StateMachine URL",
            value=Fn.sub("https://${AWS::Region}.console.aws.amazon.com/states/home?region=${AWS::Region}#/statemachines/view/${EC2Isolate_StateMachine}",
               {"EC2Isolate_StateMachine": EC2Isolate_StateMachine.state_machine_arn}
            )       
        )    
    
