# Initialize the Auto Scaling client
autoscaling_client = boto3.client('autoscaling')

# Detach instance from Auto Scaling groups
response = autoscaling_client.detach_instances(
    InstanceIds=[instance_id],
    AutoScalingGroupName='your_auto_scaling_group_name',
    ShouldDecrementDesiredCapacity=True
)

print("Instance detached from Auto Scaling groups.")


# Initialize the EBS client
ebs_client = boto3.client('ec2')

# Create a snapshot of the instance's root volume
response = ebs_client.create_snapshot(
    VolumeId='your_volume_id',
    Description='Snapshot for quarantined instance'
)
snapshot_id = response['SnapshotId']

# Send notification using SNS
sns_client = boto3.client('sns')
sns_client.publish(
    TopicArn='your_topic_arn',
    Subject='EC2 Instance Snapshot Created',
    Message=f"A new snapshot with ID {snapshot_id} has been created for the quarantined instance."
)

print("Snapshot created and notification sent.")

# Tag the instance
ec2_client.create_tags(
    Resources=[instance_id],
    Tags=[
        {
            'Key': 'status',
            'Value': 'quarantined'
        }
    ]
)

# Send notification using SNS
sns_client.publish(
    TopicArn='your_topic_arn',
    Subject='EC2 Instance Tagged',
    Message=f"The EC2 instance {instance_id} has been tagged as quarantined."
)

print("Instance tagged and notification sent.")



        # Step 5: Create a snapshot of the EC2 instance and send a notification
        snapshot_lambda = _lambda.Function(
            self,
            "SnapshotLambda",
            runtime=_lambda.Runtime.PYTHON_3_8,
            handler="index.handler",
            code=_lambda.Code.from_asset("lambda_functions"),
        )
        snapshot_lambda.add_environment("INSTANCE_ID", instance_metadata.instance_id)
        instance_metadata.add_property_override(
            "MetadataOptions", {"HttpTokens": "optional", "HttpPutResponseHopLimit": 2}
        )
        instance_metadata.add_property_override(
            "ShutdownBehavior", "stop"
        )
        snapshot_lambda.add_event_source(
            _lambda.EventSource(
                sns.SnsEventSource(
                    sns.Topic(
                        self,
                        "InstanceSnapshotTopic",
                        display_name="InstanceSnapshotTopic",
                    )
                )
            )
        )

        # Step 6: Tag the Amazon EC2 instance with a tag called "status" with the value "quarantined"
        instance_metadata.add_property_override("Tags.status", "quarantined")
        instance_metadata.add_property_override(
            "MetadataOptions", {"HttpTokens": "optional", "HttpPutResponseHopLimit": 2}
        )

        # Send a notification using AWS SNS
        instance_snapshot_topic = sns.Topic(
            self,
            "InstanceSnapshotTopic",
            display_name="InstanceSnapshotTopic",
        )
        instance_snapshot_topic.add_subscription(
            subs.EmailSubscription("your-email@example.com")
        )
